waves.matcher {
  # Matcher's account address
  account = ""

  # Matcher's directories
  matcher-directory = ${waves.directory}"/matcher"
  data-directory = ${waves.matcher.matcher-directory}"/data"
  journal-directory = ${waves.matcher.matcher-directory}"/journal"
  snapshots-directory = ${waves.matcher.matcher-directory}"/snapshots"

  # Matcher REST API bind address
  bind-address = "127.0.0.1"

  # Matcher REST API port
  port = 6886

  # Base fee for the exchange transaction
  exchange-tx-base-fee = 300000

  # Settings for matcher's fee in order
  order-fee {
    # Dynamic fee in some asset from the predefined list or fixed asset and fee or percent fee in asset of the pair
    mode = "dynamic" # | "fixed" | "percent"

    # Has additional change for matcher and assets scripts
    dynamic {
      # Absolute
      base-fee = 300000
    }

    fixed {
      # Fixed fee asset
      asset = "WAVES" # | "some issued asset (base58)"

      # Minimum allowed order fee for fixed mode
      min-fee = 300000
    }

    percent {
      # Asset type for fee
      asset-type = "amount" # | "price" | "spending" | "receiving"

      # In percents
      min-fee = 0.1
    }
  }

  # Price and fee deviations (in percents)
  max-price-deviations {
    # Enable/disable deviations checks
    enable = no
    # Max price deviation IN FAVOR of the client
    profit = 1000000
    # Max price deviation AGAINST the client
    loss = 1000000
    # Max fee deviation from the market price
    fee = 1000000
  }

  # Whitelist of the asset pairs. Empty whitelist means that all pairs are allowed
  #
  # allowed-asset-pairs = [
  #  "WAVES-8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS"
  # ]
  allowed-asset-pairs = []

  # Enable/disable orders of version 3
  allow-order-v3 = no

  # Restrictions for the orders. Empty list means that there are no restrictions on the orders
  #
  #  Default values for the pairs:
  #
  #   min-amount = 0.00000001,
  #   max-amount = 1000000000
  #   step-size  = 0.00000001
  #   min-price  = 0.00000001,
  #   max-price  = 1000000
  #   tick-size  = 0.00000001
  #   merge-small-prices = no
  #
  # Example:
  #
  # order-restrictions = [
  #   {
  #     pair = "WAVES-8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS",
  #     min-amount = 0.001,
  #     max-amount = 1000000
  #     step-size = 0.001
  #     min-price = 0.001,
  #     max-price = 100000,
  #     tick-size = 0.002,
  #     merge-small-price = yes
  #   },
  #   ...
  # ]
  order-restrictions = []

  # Disable charging of additional fee for new orders from scripted accounts or for smart assets
  disable-extra-fee-for-script = no

  # Snapshots creation interval (in events)
  snapshots-interval = 1000000

  # Make snapshots after recovery at start
  make-snapshots-at-start = no

  # Maximum time to recover all order books from snapshots
  snapshots-loading-timeout = 10m

  # Maximum time to recover events those observed at start
  start-events-processing-timeout = 20m

  # Maximum allowed amount of orders retrieved via REST
  rest-order-limit = 100

  # Base assets used as price assets
  price-assets: []

  # Blacklisted assets id
  blacklisted-assets: []

  # Blacklisted assets name
  blacklisted-names: []

  # Blacklisted addresses
  blacklisted-addresses: []

  # Whitelist of the asset pairs. Empty whitelist means that all pairs are allowed
  #
  # allowed-asset-pairs = [
  #  "WAVES-8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS"
  # ]
  allowed-asset-pairs: []

  # Cache for /matcher/orderbook/{amountAsset}/{priceAsset}?depth=N
  order-book-snapshot-http-cache {
    # A timeout to store cache
    cache-timeout = 5s

    # Cache for these depths. When ?depth=3 is requested, returned a cache for depth of 10
    depth-ranges = [10, 100]
  }

  # Interval to buffer balance changes before process them
  balance-watching-buffer-interval = 5s

  # Queue for events (order was added, order was cancelled)
  events-queue {
    # Store events locally in LevelDB
    type = "local" # Other possible values: kafka

    local {
      # If "no" - no events will be written to the queue. Useful for debugging
      enable-storing = yes

      # Interval between reads from the disk
      polling-interval = 20ms

      # Max elements per poll
      max-elements-per-poll = 100

      # Clean old records before start consuming
      clean-before-consume = yes
    }

    kafka {
      # Kafka servers in format: host1:port1,host2:port2,...
      servers = ""

      # Where events should be written and read from
      topic = "dex-events"

      # For different matchers connected to the same topic should be different groups
      group = "0"

      # Consumer-related settings
      consumer {
        # Buffer for polled events
        buffer-size = 100

        # Recovery settings (see akka.stream.scaladsl.Restart for detailed information)

        # Initial duration before consumer start after fail
        min-backoff = 3s

        # Maximum duration before consumer start after fail
        max-backoff = 10s
      }

      # Producer-related settings
      producer {
        # If "no" - no events will be written to the queue. Useful for debugging
        enable = yes

        # Buffer for pushed events
        buffer-size = 100
      }
    }
  }

  # Settings for transaction broadcaster
  exchange-transaction-broadcast {
    # Broadcast exchange transactions until they are confirmed by blockchain.
    # If "no", a transaction will be broadcasted once.
    broadcast-until-confirmed = no

    # When broadcast-until-confirmed = yes
    # * Bettween checks;
    # * A transaction will not be sent more frequently than this interval.
    interval = 1 minute

    # When broadcast-until-confirmed = yes
    # Not sended transaction:
    # * Will be removed from queue after this timeout;
    # * A warning will be loggeg.
    max-pending-time = 15 minutes
  }
}

include "dex-local.conf"
